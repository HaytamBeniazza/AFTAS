name: 🚀 AFTAS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'

jobs:
  # ====================================
  # Backend Testing & Build
  # ====================================
  backend-test:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: aftas_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: 📦 Cache Maven Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: 🧪 Run Backend Tests
      run: |
        cd backend
        ./mvnw clean test
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/aftas_test
        SPRING_DATASOURCE_USERNAME: test_user
        SPRING_DATASOURCE_PASSWORD: test_password

    - name: 📊 Generate Test Coverage Report
      run: |
        cd backend
        ./mvnw jacoco:report

    - name: 📈 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./aftas-api/target/site/jacoco/jacoco.xml
        flags: backend

    - name: 🔧 Build Backend
      run: |
        cd backend
        ./mvnw clean package -DskipTests

    - name: 📦 Upload Backend Artifact
      uses: actions/upload-artifact@v3
      with:
        name: backend-jar
        path: aftas-api/target/*.jar

  # ====================================
  # Frontend Testing & Build
  # ====================================
  frontend-test:
    name: 🧪 Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: WI-GOLD-FISH-FRONT-master/package-lock.json

    - name: 📦 Install Dependencies
      run: |
        cd WI-GOLD-FISH-FRONT-master
        npm ci

    - name: 🧪 Run Frontend Tests
      run: |
        cd WI-GOLD-FISH-FRONT-master
        npm run test:ci

    - name: 📊 Generate Coverage Report
      run: |
        cd WI-GOLD-FISH-FRONT-master
        npm run test:coverage

    - name: 📈 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./WI-GOLD-FISH-FRONT-master/coverage/lcov.info
        flags: frontend

    - name: 🎯 Lint Code
      run: |
        cd WI-GOLD-FISH-FRONT-master
        npm run lint

    - name: 🔧 Build Frontend
      run: |
        cd WI-GOLD-FISH-FRONT-master
        npm run build --prod

    - name: 📦 Upload Frontend Artifact
      uses: actions/upload-artifact@v3
      with:
        name: frontend-dist
        path: WI-GOLD-FISH-FRONT-master/dist/

  # ====================================
  # Security Scanning
  # ====================================
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Trivy Scan Results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # ====================================
  # Docker Build & Push
  # ====================================
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 📦 Download Backend Artifact
      uses: actions/download-artifact@v3
      with:
        name: backend-jar
        path: aftas-api/target/

    - name: 📦 Download Frontend Artifact
      uses: actions/download-artifact@v3
      with:
        name: frontend-dist
        path: WI-GOLD-FISH-FRONT-master/dist/

    - name: 🔧 Build and Push Backend Image
      uses: docker/build-push-action@v5
      with:
        context: ./aftas-api
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/aftas-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/aftas-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🔧 Build and Push Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./WI-GOLD-FISH-FRONT-master
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/aftas-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/aftas-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ====================================
  # Deploy to Staging
  # ====================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Add your staging deployment commands here
        # docker-compose -f docker-compose.staging.yml up -d

    - name: 🧪 Run Integration Tests
      run: |
        echo "🧪 Running integration tests..."
        # Add integration test commands here

    - name: 📢 Notify Deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # ====================================
  # Deploy to Production
  # ====================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🌟 Deploy to Production
      run: |
        echo "🌟 Deploying to production environment..."
        # Add your production deployment commands here

    - name: 📢 Notify Production Deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # ====================================
  # Performance Testing
  # ====================================
  performance-test:
    name: 📊 Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📊 Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true 