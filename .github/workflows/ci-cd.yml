name: 🚀 AFTAS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'

jobs:
  # ====================================
  # Backend Testing & Build
  # ====================================
  backend-test:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: aftas_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: 📦 Cache Maven Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: 🧪 Run Backend Tests
      run: |
        cd backend
        ./mvnw clean test
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/aftas_test
        SPRING_DATASOURCE_USERNAME: test_user
        SPRING_DATASOURCE_PASSWORD: test_password

    - name: 📊 Generate Test Coverage Report
      run: |
        cd backend
        ./mvnw jacoco:report

    - name: 📈 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/target/site/jacoco/jacoco.xml
        flags: backend

    - name: 🔧 Build Backend
      run: |
        cd backend
        ./mvnw clean package -DskipTests

    - name: 📦 Upload Backend Artifact
      uses: actions/upload-artifact@v3
      with:
        name: backend-jar
        path: backend/target/*.jar

  # ====================================
  # Frontend Testing & Build
  # ====================================
  frontend-test:
    name: 🧪 Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 📦 Install Dependencies
      run: |
        cd frontend
        npm ci

    - name: 🧪 Run Frontend Tests
      run: |
        cd frontend
        npm run test:ci

    - name: 📊 Generate Coverage Report
      run: |
        cd frontend
        npm run test:coverage

    - name: 📈 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend

    - name: 🎯 Lint Code
      run: |
        cd frontend
        npm run lint

    - name: 🔧 Build Frontend
      run: |
        cd frontend
        npm run build:prod

    - name: 📦 Upload Frontend Artifact
      uses: actions/upload-artifact@v3
      with:
        name: frontend-dist
        path: frontend/dist/

  # ====================================
  # Security Scanning
  # ====================================
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Trivy Scan Results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # ====================================
  # Docker Build (Only on main branch)
  # ====================================
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 📦 Download Backend Artifact
      uses: actions/download-artifact@v3
      with:
        name: backend-jar
        path: backend/target/

    - name: 📦 Download Frontend Artifact
      uses: actions/download-artifact@v3
      with:
        name: frontend-dist
        path: frontend/dist/

    - name: 🔧 Build Backend Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: aftas-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🔧 Build Frontend Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: aftas-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: ✅ Docker Build Complete
      run: |
        echo "🎉 Docker images built successfully!"
        echo "Backend image: aftas-backend:latest"
        echo "Frontend image: aftas-frontend:latest"

  # ====================================
  # Quality Gate
  # ====================================
  quality-gate:
    name: 🎯 Quality Gate
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan, docker-build]
    if: always()

    steps:
    - name: 📊 Check Quality Gate
      run: |
        echo "🔍 Checking quality gate status..."
        
        # Check if all required jobs passed
        if [[ "${{ needs.backend-test.result }}" == "success" && 
              "${{ needs.frontend-test.result }}" == "success" && 
              "${{ needs.security-scan.result }}" == "success" ]]; then
          echo "✅ Quality gate passed!"
          echo "🎉 All tests and security scans successful"
        else
          echo "❌ Quality gate failed!"
          echo "Backend tests: ${{ needs.backend-test.result }}"
          echo "Frontend tests: ${{ needs.frontend-test.result }}"
          echo "Security scan: ${{ needs.security-scan.result }}"
          exit 1
        fi

    - name: 🎉 Success Notification
      if: success()
      run: |
        echo "🚀 AFTAS Pipeline completed successfully!"
        echo "✅ Ready for deployment" 